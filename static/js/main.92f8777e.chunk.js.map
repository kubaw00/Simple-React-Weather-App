{"version":3,"sources":["components/Form.js","components/Result.js","components/App.js","reportWebVitals.js","index.js"],"names":["Form","props","onSubmit","submit","onChange","change","type","placeholder","value","content","Result","weather","city","err","sunrise","sunset","temp","pressure","wind","date","sunsetTime","Date","toLocaleTimeString","sunriseTime","className","App","state","handleOnChange","e","setState","target","prevProps","prevState","this","length","API","fetch","then","res","ok","Error","json","data","toLocaleString","sys","main","speed","catch","handleSubmit","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wQAiBeA,EAfF,SAAAC,GACT,OACI,sBAAMC,SAAUD,EAAME,OAAtB,SACI,uBACAC,SAAUH,EAAMI,OAChBC,KAAK,OACLC,YAAY,0BACZC,MAAOP,EAAMO,WCNrBC,G,MAAU,MAsCCC,EApCA,SAACT,GACZ,MAA0EA,EAAMU,QAAxEH,EAAR,EAAQA,MAAOI,EAAf,EAAeA,KAAMC,EAArB,EAAqBA,IAAKC,EAA1B,EAA0BA,QAASC,EAAnC,EAAmCA,OAAQC,EAA3C,EAA2CA,KAAMC,EAAjD,EAAiDA,SAAUC,EAA3D,EAA2DA,KAAMC,EAAjE,EAAiEA,KAMjE,GAJY,KAAVX,IACCC,EAAU,OAGTI,GAAOL,EAAM,CACb,IAAMY,EAAa,IAAIC,KAAc,IAATN,GAAeO,qBACrCC,EAAc,IAAIF,KAAe,IAAVP,GAAgBQ,qBAE7Cb,EACI,qCACI,2DAA6B,6BAAKG,OAClC,2DAA8BO,KAC9B,8DAAoBI,KACpB,8DAAoBH,KACpB,yDAA4BJ,EAA5B,YACA,gEAA8BC,EAA9B,UACA,kEAAsBC,EAAtB,aAQZ,OAEI,qBAAKM,UAAU,SAAf,SACKX,EAAG,UAAML,EAAN,gCAA4CC,KC6F7CgB,E,4MAxHbC,MAAQ,CACNlB,MAAO,GACPW,KAAM,GACNP,KAAK,GACLE,QAAS,GACTC,OAAQ,GACRC,KAAM,GACNC,SAAU,GACVC,KAAM,GACNL,KAAK,G,EAGNc,eAAiB,SAACC,GACf,EAAKC,SAAS,CACZrB,MAAOoB,EAAEE,OAAOtB,QAEI,KAAnBoB,EAAEE,OAAOtB,OACV,EAAKqB,SAAS,CACZjB,KAAMgB,EAAEE,OAAOtB,MACfK,KAAK,K,wDA0Cd,SAAmBkB,EAAWC,GAAY,IAAD,OAExC,GAA+B,IAA5BC,KAAKP,MAAMlB,MAAM0B,QAEjBD,KAAKP,MAAMlB,QAAUwB,EAAUxB,MAAO,CAE3C,IAAM2B,EAAG,4DAAwDF,KAAKP,MAAMlB,MAAnE,+BAtEM,oCAwEV4B,MAAMD,GACLE,MAAK,SAAAC,GACJ,GAAGA,EAAIC,GACL,OAAOD,EAGT,MAAME,MAAM,8BAEbH,MAAK,SAAAC,GAAG,OAAIA,EAAIG,UAChBJ,MAAK,SAAAK,GACJ,IAAMvB,GAAO,IAAIE,MAAOsB,iBACvB,EAAKd,UAAU,SAAAG,GAAS,MAAK,CAC3BnB,KAAK,EACLM,OACAL,QAAS4B,EAAKE,IAAI9B,QAClBC,OAAQ2B,EAAKE,IAAI7B,OACjBC,KAAM0B,EAAKG,KAAK7B,KAChBC,SAAUyB,EAAKG,KAAK5B,SACpBC,KAAMwB,EAAKxB,KAAK4B,MAChBlC,KAAMoB,EAAUxB,aAIpBuC,OAAM,SAAAlC,GAEL,EAAKgB,UAAS,SAAAG,GAAS,MAAK,CAC1BnB,KAAK,EACLD,KAAMoB,EAAUxB,gB,oBASvB,WACE,OACE,sBAAKgB,UAAU,MAAf,UACE,cAAC,EAAD,CACAhB,MAAOyB,KAAKP,MAAMlB,MAClBH,OAAQ4B,KAAKN,eACbxB,OAAQ8B,KAAKe,eAEb,cAAC,EAAD,CAAQrC,QAASsB,KAAKP,e,GAlHZuB,aCKHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBf,MAAK,YAAkD,IAA/CgB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.92f8777e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = props => {\r\n    return (  \r\n        <form onSubmit={props.submit}>\r\n            <input \r\n            onChange={props.change} \r\n            type=\"text\"\r\n            placeholder=\"Podaj nazwę miasta\"\r\n            value={props.value}\r\n            \r\n            />\r\n           \r\n        </form>  \r\n    );\r\n}\r\n \r\nexport default Form;","import React from 'react';\r\nimport './Result.css'\r\n\r\nlet content = null;\r\n\r\nconst Result = (props) => {\r\n    const { value, city, err, sunrise, sunset, temp, pressure, wind, date } = props.weather\r\n    \r\n   if(value === \"\"){\r\n       content = null\r\n   }\r\n\r\n    if(!err && value){\r\n        const sunsetTime = new Date(sunset * 1000).toLocaleTimeString();\r\n        const sunriseTime = new Date(sunrise * 1000).toLocaleTimeString();\r\n\r\n        content = (\r\n            <>\r\n                <h3>Wyniki wyszukiwania dla: <em>{city}</em></h3>\r\n                <h4>Dane dla dnia i godziny: {date}</h4>\r\n                <h4>Wschód Słońca: {sunriseTime}</h4>\r\n                <h4>Zachód Słońca: {sunsetTime}</h4>\r\n                <h4>Temperatura powietrza: {temp} &deg;C</h4>\r\n                <h4>Ciśnienie atmosferyczne: {pressure} hPa</h4>\r\n                <h4>Prędkość wiatru: {wind} m/s</h4>\r\n            </>\r\n        )\r\n\r\n    }\r\n    \r\n    \r\n\r\n    return (\r\n        \r\n        <div className=\"result\">\r\n            {err ? `${value} nie istnieje w naszej bazie` : content}\r\n        </div>\r\n      \r\n      );\r\n}\r\n \r\nexport default Result;","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './Form'\nimport Result from './Result'\n\nconst APIKey = '8c705f27c223baf0aa97221bc7cc78bd'\n\nclass App extends Component {\n  state = { \n    value: \"\",\n    date: \"\",\n    city:\"\",\n    sunrise: \"\",\n    sunset: \"\",\n    temp: \"\",\n    pressure: \"\",\n    wind: \"\",\n    err: false,\n   }\n\n   handleOnChange = (e) => {\n      this.setState({\n        value: e.target.value\n      })\n      if(e.target.value === \"\"){\n        this.setState({\n          city: e.target.value,\n          err: false,\n        })\n      }\n      \n   }\n\n  //  handleSubmit = (e) => {\n  //    e.preventDefault();\n  //    const API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&units=metric&appid=${APIKey}`;\n\n  //    fetch(API)\n  //    .then(res => {\n  //      if(res.ok) {\n  //        return res\n  //      }\n\n  //      throw Error(\"nie udało się\")\n  //    })\n  //    .then(res => res.json())\n  //    .then(data => {\n  //      const date = new Date().toLocaleString()\n  //       this.setState( prevState => ({\n  //         err: false, \n  //         date,\n  //         sunrise: data.sys.sunrise,\n  //         sunset: data.sys.sunset,\n  //         temp: data.main.temp,\n  //         pressure: data.main.pressure,\n  //         wind: data.wind.speed,\n  //         city: prevState.value,\n          \n  //       }))\n  //    })\n  //    .catch(err => {\n  //      console.log(err)\n  //      this.setState(prevState => ({\n  //        err: true,\n  //        city: prevState.value, \n  //      }))\n  //  })\n  // }\n\n componentDidUpdate(prevProps, prevState) {\n\n  if(this.state.value.length === 0 ) return\n  \n  if(this.state.value !== prevState.value) {\n\nconst API = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.value}&units=metric&appid=${APIKey}`;\n\n     fetch(API)\n     .then(res => {\n       if(res.ok) {\n         return res\n       }\n\n       throw Error(\"nie udało się\")\n     })\n     .then(res => res.json())\n     .then(data => {\n       const date = new Date().toLocaleString()\n        this.setState( prevState => ({\n          err: false, \n          date,\n          sunrise: data.sys.sunrise,\n          sunset: data.sys.sunset,\n          temp: data.main.temp,\n          pressure: data.main.pressure,\n          wind: data.wind.speed,\n          city: prevState.value,\n          \n        }))\n     })\n     .catch(err => {\n       \n       this.setState(prevState => ({\n         err: true,\n         city: prevState.value, \n       }))\n   } )\n\n\n }\n}\n\n\n  render() { \n    return (  \n      <div className=\"app\">\n        <Form \n        value={this.state.value}\n        change={this.handleOnChange}\n        submit={this.handleSubmit}\n        />\n        <Result weather={this.state} />\n      </div>\n    );\n  }\n}\n \n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}